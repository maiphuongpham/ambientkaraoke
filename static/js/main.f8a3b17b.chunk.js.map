{"version":3,"sources":["App.js","Player.js","index.js"],"names":["App","selectedFile","setSelectedFile","useState","uploadMessage","setUploadMessage","midiUrl","setMidiUrl","ambientMidiUrl","setAmbientMidiUrl","loading","setLoading","sequence","setSequence","isPlaying","setIsPlaying","playerRef","useRef","svgRef","visualizerRef","samplerRef","ambientSynthRef","useEffect","pianoReverb","Tone","decay","wet","toDestination","pianoDelay","delayTime","feedback","pianoFilter","type","frequency","Q","pianoVolume","connect","sampler","urls","A0","C1","A1","C2","A2","C3","A3","C4","A4","C5","A5","C6","A6","C7","A7","C8","release","baseUrl","onload","console","log","current","ambientSynth","oscillator","count","spread","envelope","attack","sustain","ambientVolume","ambientFilter","ambientReverb","preDelay","ambientDelay","chain","ambientLFO","start","loadMidiForPreview","async","res","fetch","url","midiData","arrayBuffer","seq","mm","innerHTML","noteRGB","activeNoteRGB","pixelsPerTimeStep","noteHeight","err","error","React","createElement","className","accept","onChange","e","target","files","onClick","alert","formData","FormData","append","method","body","data","json","ok","concat","filename","style","marginTop","disabled","midiUrls","midi_url","crossUrl","crossmodal","ambientUrl","ambient","href","rel","download","ambientSeq","time","note","triggerAttackRelease","pitch","endTime","startTime","Math","min","velocity","notes","map","n","part","redraw","bpm","value","handleStop","stop","dispose","cancel","releaseAll","ref","URL","window","location","pathname","searchParams","set","open","toString","Player","query","URLSearchParams","search","get","fetchMidi","ambientData","Root","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f8a3b17b.chunk.js","sourcesContent":["\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport * as mm from '@magenta/music';\n// import { MusicRNN, sequences } from '@magenta/music';\n\n\nimport * as Tone from 'tone';\nimport './App.css';\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadMessage, setUploadMessage] = useState('');\n  const [midiUrl, setMidiUrl] = useState('');\n\n  const [ambientMidiUrl, setAmbientMidiUrl] = useState('');\n\n  const [loading, setLoading] = useState(false);\n  const [sequence, setSequence] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playerRef = useRef(null);\n  const svgRef = useRef(null);\n  const visualizerRef = useRef(null);\n  const samplerRef = useRef(null);\n  const ambientSynthRef = useRef(null)\n\n  useEffect(() => {\n    //\n    const pianoReverb = new Tone.Reverb({\n      decay: 8,\n      wet: 0.7 // equivalent to mix: 0.7\n    }).toDestination();\n    \n    const pianoDelay = new Tone.FeedbackDelay({\n      delayTime: \"8n\",\n      feedback: 0.025,\n      wet: 0.1\n    });\n    \n    const pianoFilter = new Tone.Filter({\n      type: \"lowpass\",\n      frequency: 1600,\n      Q: 1\n    });\n    \n    const pianoVolume = new Tone.Volume(-1); // subtle dynamic shaping\n    \n    // Connect in order: Sampler → Filter → Delay → Reverb\n    pianoVolume.connect(pianoFilter);\n    pianoFilter.connect(pianoDelay);\n    pianoDelay.connect(pianoReverb);\n\n    const sampler = new Tone.Sampler({\n      urls: {\n        A0: \"A0.mp3\",\n        C1: \"C1.mp3\",\n        \"D#1\": \"Ds1.mp3\",\n        \"F#1\": \"Fs1.mp3\",\n        A1: \"A1.mp3\",\n        C2: \"C2.mp3\",\n        \"D#2\": \"Ds2.mp3\",\n        \"F#2\": \"Fs2.mp3\",\n        A2: \"A2.mp3\",\n        C3: \"C3.mp3\",\n        \"D#3\": \"Ds3.mp3\",\n        \"F#3\": \"Fs3.mp3\",\n        A3: \"A3.mp3\",\n        C4: \"C4.mp3\",\n        \"D#4\": \"Ds4.mp3\",\n        \"F#4\": \"Fs4.mp3\",\n        A4: \"A4.mp3\",\n        C5: \"C5.mp3\",\n        \"D#5\": \"Ds5.mp3\",\n        \"F#5\": \"Fs5.mp3\",\n        A5: \"A5.mp3\",\n        C6: \"C6.mp3\",\n        \"D#6\": \"Ds6.mp3\",\n        \"F#6\": \"Fs6.mp3\",\n        A6: \"A6.mp3\",\n        C7: \"C7.mp3\",\n        \"D#7\": \"Ds7.mp3\",\n        \"F#7\": \"Fs7.mp3\",\n        A7: \"A7.mp3\",\n        C8: \"C8.mp3\"\n      },\n      release: 1,\n      baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n      onload: () => console.log(\"✅ Sampler loaded\")\n    }).connect(pianoVolume)\n\n    samplerRef.current = sampler;\n\n    // Ambient background layer\n    const ambientSynth = new Tone.PolySynth(Tone.Synth, {\n      // oscillator: { type: \"sine\" },\n      oscillator: { type: \"fatsawtooth\", count: 3, spread: 40 },\n      envelope: {\n        attack: 0.05,\n        decay: 0.2,\n        sustain: 0.8,\n        release: 1\n      }\n    });\n    \n    // NEW: Lower volume\n    const ambientVolume = new Tone.Volume(-24); // Around -24 dB is subtle\n    ambientSynthRef.current = ambientSynth;\n\n    const ambientFilter = new Tone.Filter({\n      type: \"lowpass\",\n      frequency: 600,\n      Q: 1\n    });\n\n    const ambientReverb = new Tone.Reverb({\n      decay: 10,\n      preDelay: 0.2\n    }).toDestination();\n\n    const ambientDelay = new Tone.FeedbackDelay(\"4n\", 0.3).connect(ambientReverb);\n\n    ambientSynth.chain(ambientVolume, ambientFilter, ambientDelay);\n\n    // slow modulation\n    const ambientLFO = new Tone.LFO(\"0.05hz\", 400, 1000);\n    ambientLFO.connect(ambientFilter.frequency);\n    ambientLFO.start();\n  \n  }, []);\n\n  const handleFileChange = (e) => {\n    setSelectedFile(e.target.files[0]);\n    setUploadMessage('');\n    setMidiUrl('');\n    setSequence(null);\n    if (svgRef.current) svgRef.current.innerHTML = '';\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      alert(\"Please select a .wav file first.\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n\n    try {\n      setLoading(true);\n      const res = await fetch(\"http://127.0.0.1:5000/api/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n\n      const data = await res.json();\n      setUploadMessage(res.ok ? `✅ Uploaded: ${data.filename}` : `❌ Upload failed: ${data.error}`);\n    } catch (err) {\n      console.error(\"❌ Upload error:\", err);\n      setUploadMessage(\"❌ Upload failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGenerate = async () => {\n    try {\n      setLoading(true);\n      const res = await fetch(\"http://127.0.0.1:5000/api/generate\", { method: \"POST\" });\n      const data = await res.json();\n\n      if (res.ok) {\n        const midiUrls = data.midi_url;\n        const crossUrl = `http://127.0.0.1:5000${midiUrls.crossmodal}`;\n        const ambientUrl = `http://127.0.0.1:5000${midiUrls.ambient}`;\n        \n        setMidiUrl(crossUrl);\n        setAmbientMidiUrl(ambientUrl);\n        loadMidiForPreview(crossUrl);\n      } else {\n        alert(\"❌ Generation failed: \" + data.error);\n      }\n    } catch (err) {\n      console.error(\"❌ Generation error:\", err);\n      alert(\"❌ Generation failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadMidiForPreview = async (url) => {\n    try {\n      const res = await fetch(url);\n      const midiData = await res.arrayBuffer();\n      const seq = mm.midiToSequenceProto(midiData);\n      setSequence(seq);\n\n      if (svgRef.current) {\n        svgRef.current.innerHTML = '';\n        visualizerRef.current = new mm.WaterfallSVGVisualizer(seq, svgRef.current, {\n          noteRGB: '0, 0, 0',\n          activeNoteRGB: '255, 0, 0',\n          pixelsPerTimeStep: 80,\n          noteHeight: 6,\n        });\n      }\n    } catch (err) {\n      console.error(\"❌ Failed to load MIDI for preview:\", err);\n    }\n  };\n\n  const handlePlay = async () => {\n    if (!sequence || !samplerRef.current) return;\n  \n    await Tone.start();\n  \n    // Play ambient background MIDI\n    if (ambientMidiUrl) {\n      try {\n        const res = await fetch(ambientMidiUrl);\n        const midiData = await res.arrayBuffer();\n        const ambientSeq = mm.midiToSequenceProto(midiData);\n  \n        new Tone.Part((time, note) => {\n          ambientSynthRef.current.triggerAttackRelease(\n            Tone.Frequency(note.pitch, \"midi\"),\n            note.endTime - note.startTime,\n            time,\n            Math.min(note.velocity || 0.5, 0.5)\n          );\n        }, ambientSeq.notes.map(n => [n.startTime, n])).start(0);\n      } catch (err) {\n        console.error(\"⚠️ Ambient MIDI playback failed:\", err);\n      }\n    }\n\n      const part = new Tone.Part((time, note) => {\n        samplerRef.current.triggerAttackRelease(\n          Tone.Frequency(note.pitch, \"midi\"),\n          note.endTime - note.startTime + 1,\n          time,\n          Math.min(note.velocity || 0.8, 0.8)\n        );\n      \n        if (visualizerRef.current) {\n          visualizerRef.current.redraw(note); // ✅ PASS SAME OBJECT FROM continuedSeq\n        }\n      }, sequence.notes.map(n => [n.startTime, n])); // ✅ map directly from continuedSeq\n  \n    part.start(0);\n    Tone.Transport.bpm.value = 120;\n    Tone.Transport.start();\n  \n    playerRef.current = part;\n    setIsPlaying(true);\n  };\n\n  const handleStop = () => {\n    if (playerRef.current) {\n      playerRef.current.stop();\n      playerRef.current.dispose();\n      playerRef.current = null;\n    }\n  \n    Tone.Transport.stop();\n    Tone.Transport.cancel();\n    ambientSynthRef.current.releaseAll();\n    setIsPlaying(false);\n  };\n  \n\n  return (\n    <div className=\"container\">\n      <h1>Upload and Generate Accompaniment</h1>\n\n      <input type=\"file\" accept=\".wav\" onChange={handleFileChange} />\n      <button onClick={handleUpload} style={{ marginTop: '10px' }} disabled={loading}>\n        Upload WAV\n      </button>\n\n      {uploadMessage && <p>{uploadMessage}</p>}\n      <hr />\n\n      <button onClick={handleGenerate} disabled={loading || !selectedFile}>\n        Generate Accompaniment\n      </button>\n\n      {loading && <p>Processing...</p>}\n\n      {midiUrl && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Generated MIDI</h3>\n          <a href={midiUrl} target=\"_blank\" rel=\"noopener noreferrer\" download>Download MIDI</a>\n\n          <div style={{ marginTop: '10px' }}>\n            {/* <button onClick={handlePlay}>▶️ Play MIDI</button>\n            <button onClick={handleStop}>⏹ Stop</button> */}\n            <button onClick={handlePlay} disabled={isPlaying || !sequence}>Play MIDI\n            </button>\n            <button onClick={handleStop} disabled={!isPlaying}>Stop\n            </button>\n          </div>\n\n          <div\n\n  ref={svgRef} className=\"app-visualizer-container\"></div>\n\n        <button\n          onClick={() => {\n            const url = new URL(window.location.href);\n            url.pathname = \"/player\";\n            url.searchParams.set(\"midi\", midiUrl);\n            url.searchParams.set(\"ambient\", ambientMidiUrl);\n            window.open(url.toString(), \"_blank\"); // open in a new tab\n          }}\n          disabled={!midiUrl}\n        >\n          Open Fullscreen Player\n        </button>\n\n\n          {/* <audio controls src={midiUrl.replace('.mid', '.wav')} style={{ marginTop: '20px' }} /> */}\n        </div>\n      )}\n    </div>\n    \n  );\n}\n\nexport default App;\n\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as mm from '@magenta/music';\nimport * as Tone from 'tone';\nimport './Player.css';\n\nfunction Player() {\n  const svgRef = useRef(null);\n  const visualizerRef = useRef(null);\n  const samplerRef = useRef(null);\n  const ambientSynthRef = useRef(null);\n  const [sequence, setSequence] = useState(null);\n\n  const query = new URLSearchParams(window.location.search);\n  const midiUrl = query.get(\"midi\");\n  const ambientUrl = query.get(\"ambient\");\n\n  useEffect(() => {\n    // Effects chain for sampler\n    const pianoReverb = new Tone.Reverb({ decay: 8, wet: 0.7 }).toDestination();\n    const pianoDelay = new Tone.FeedbackDelay({ delayTime: \"8n\", feedback: 0.025, wet: 0.1 });\n    const pianoFilter = new Tone.Filter({ type: \"lowpass\", frequency: 1600, Q: 1 });\n    const pianoVolume = new Tone.Volume(-1);\n    pianoVolume.connect(pianoFilter);\n    pianoFilter.connect(pianoDelay);\n    pianoDelay.connect(pianoReverb);\n\n    const sampler = new Tone.Sampler({\n      urls: {\n        A0: \"A0.mp3\",\n        C1: \"C1.mp3\",\n        \"D#1\": \"Ds1.mp3\",\n        \"F#1\": \"Fs1.mp3\",\n        A1: \"A1.mp3\",\n        C2: \"C2.mp3\",\n        \"D#2\": \"Ds2.mp3\",\n        \"F#2\": \"Fs2.mp3\",\n        A2: \"A2.mp3\",\n        C3: \"C3.mp3\",\n        \"D#3\": \"Ds3.mp3\",\n        \"F#3\": \"Fs3.mp3\",\n        A3: \"A3.mp3\",\n        C4: \"C4.mp3\",\n        \"D#4\": \"Ds4.mp3\",\n        \"F#4\": \"Fs4.mp3\",\n        A4: \"A4.mp3\",\n        C5: \"C5.mp3\",\n        \"D#5\": \"Ds5.mp3\",\n        \"F#5\": \"Fs5.mp3\",\n        A5: \"A5.mp3\",\n        C6: \"C6.mp3\",\n        \"D#6\": \"Ds6.mp3\",\n        \"F#6\": \"Fs6.mp3\",\n        A6: \"A6.mp3\",\n        C7: \"C7.mp3\",\n        \"D#7\": \"Ds7.mp3\",\n        \"F#7\": \"Fs7.mp3\",\n        A7: \"A7.mp3\",\n        C8: \"C8.mp3\"\n      },\n      release: 1,\n      baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n      onload: () => console.log(\"✅ Sampler loaded\")\n    }).connect(pianoVolume);\n    samplerRef.current = sampler;\n\n    // Ambient synth\n    const ambientSynth = new Tone.PolySynth(Tone.Synth, {\n      oscillator: { type: \"fatsawtooth\", count: 3, spread: 40 },\n      envelope: {\n        attack: 0.05,\n        decay: 0.2,\n        sustain: 0.8,\n        release: 1\n      }\n    });\n\n    const ambientVolume = new Tone.Volume(-24);\n    const ambientFilter = new Tone.Filter({ type: \"lowpass\", frequency: 600, Q: 1 });\n    const ambientReverb = new Tone.Reverb({ decay: 10, preDelay: 0.2 }).toDestination();\n    const ambientDelay = new Tone.FeedbackDelay(\"4n\", 0.3).connect(ambientReverb);\n\n    ambientSynth.chain(ambientVolume, ambientFilter, ambientDelay);\n    ambientSynthRef.current = ambientSynth;\n\n    const ambientLFO = new Tone.LFO(\"0.05hz\", 400, 1000);\n    ambientLFO.connect(ambientFilter.frequency);\n    ambientLFO.start();\n  }, []);\n\n  useEffect(() => {\n    const fetchMidi = async () => {\n      const res = await fetch(midiUrl);\n      const data = await res.arrayBuffer();\n      const seq = mm.midiToSequenceProto(data);\n      setSequence(seq);\n\n      if (svgRef.current) {\n        svgRef.current.innerHTML = '';\n        visualizerRef.current = new mm.WaterfallSVGVisualizer(seq, svgRef.current, {\n          noteRGB: '255,255,255',\n          activeNoteRGB: '255,150,180',\n          pixelsPerTimeStep: 200,\n          noteHeight: 7,\n        });\n      }\n    };\n\n    if (midiUrl) fetchMidi();\n  }, [midiUrl]);\n\n  const handlePlay = async () => {\n    await Tone.start();\n\n    // Ambient\n    if (ambientUrl) {\n      const res = await fetch(ambientUrl);\n      const ambientData = await res.arrayBuffer();\n      const ambientSeq = mm.midiToSequenceProto(ambientData);\n\n      new Tone.Part((time, note) => {\n        ambientSynthRef.current.triggerAttackRelease(\n          Tone.Frequency(note.pitch, \"midi\"),\n          note.endTime - note.startTime,\n          time,\n          Math.min(note.velocity || 0.5, 0.5)\n        );\n      }, ambientSeq.notes.map(n => [n.startTime, n])).start(0);\n    }\n\n    // Main sequence\n    const part = new Tone.Part((time, note) => {\n      samplerRef.current.triggerAttackRelease(\n        Tone.Frequency(note.pitch, \"midi\"),\n        note.endTime - note.startTime + 1,\n        time,\n        Math.min(note.velocity || 0.8, 0.8)\n      );\n\n      if (visualizerRef.current) {\n        visualizerRef.current.redraw(note);\n      }\n    }, sequence.notes.map(n => [n.startTime, n]));\n\n    part.start(0);\n    Tone.Transport.start();\n  };\n\n  return (\n    <div className=\"fullscreen-player\">\n      <div className=\"visualizer-container\" ref={svgRef}></div>\n      <button className=\"fullscreen-play\" onClick={handlePlay}>Play</button>\n    </div>\n  );\n}\n\nexport default Player;\n","// import React from 'react';\n// import ReactDOM from 'react-dom/client';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport App from './App';\nimport Player from './Player';\n\nfunction Root() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/player\" element={<Player />} />\n      </Routes>\n    </Router>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Root />);\n"],"sourceRoot":""}